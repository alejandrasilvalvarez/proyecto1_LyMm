/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Abril: 2008 - Simplificado apra solo interpretaci�n
2020: Obstaculos


 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashSet<String> vars;
	
	
	void setWorld(RobotWorld w) {
	  	vars= new HashSet< >();
		world = (RobotWorldDec) w;	
	}

	
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}

TOKEN: /* Nombres de Comandos */
{

			<T_MOVER:  "Move">
		| 	<T_TURNRIGHT: "TURNRIGHT">
		| 	<T_PONER: "Put">
		| 	<T_RECOGER: "Pick">
		| 	<T_CAMINAR: "walk">
		| 	<T_ROTAR: "Rotate">
		| 	<T_MIRAR: "Look">
		| 	<T_SOLTAR: "drop">
		| 	<T_LIBERAR: "free">
		| 	<T_COGER: "grab">
		| 	<T_CAMINAR_A: "walkTo">
		| 	<T_NOP: "NOP">		
}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}

TOKEN :/*CONDITIONALS*/
{
		<IF: "if" >
		|  	<BLOCKED: "bloqued">
		|  	<FACING: "facing">
		|  	<CAN: "can">
		|  	<NOT: "not">
		
}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}

TOKEN : /*VARIABLE*/
{
		<VARIABLE: (<CHARACTER>)+ >
		|  	<#CHARACTER: ["a"-"z"] >
}

TOKEN : /*DIRECTIONS*/
{
		<LEFT: "left" >
		|  <RIGHT: "right" >
		|  <BACK: "back" >
}

TOKEN : /*CADINALITY*/
{
		<NORTH: "N" >
		|  <WEST: "W" >
		|  <EAST: "E" >
		|  <SOUTH: "S" >
}


	boolean command(StringBuffer sistema) :
	{			
		int x;
		String y; 
		String salida=new String();		
	}	
	{
		(
		   <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Comando GIRAR DER";}
		| 	<T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Comando MOVER ADELANTE";}  
		|  <T_PONER> "("  objetoPoner() ")" {	salida = "Comando:  PONER"; }					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"	{salida = "Comando:  Recoger";}
		| "(" <T_CAMINAR> x=numero ")" {world.moveForward(x);salida = "Comando CAMINAR";}
		|  "(" <T_ROTAR>  direcciones()  ")"{salida = "Comando ROTAR";}
		| "(" <T_MIRAR> facing() ")" {salida = "Comando MIRAR";}
		|  "(" <T_SOLTAR> numeroOVariable() ")" {salida = "Comando SOLTAR";}
		|  "(" <T_LIBERAR> numeroOVariable() ")" {salida = "Comando LIBERAR";}
		|  "(" <T_COGER> numeroOVariable() ")" {salida = "Comando COGER";}
		|  "(" <T_CAMINAR_A > numeroOVariable() cardinalidad() ")" {salida = "Comando CAMINAR A";}
		|  "(" <T_NOP>	")" {salida = "Comando NOP";}
		
		
		)  

		{
		    try {
	    			        Thread.sleep(2000);
	    			    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    			    }
	    			 
			sistema.append(salida);
			return true;
		}

		

		| <EOF> {return false;} 
	}

	int cardinalidad()
	{ }
	{
		<NORTH>
		|  <WEST>
		|  <EAST>
		|  <SOUTH>
	}

	int numeroOVariable()
	{ 	int x= -487;
		String y=null;
	}
	{
		y= variableString() { if(vars.contains(y)) return 100;}
		| n=numero() { if(x != -487) return x;}
		{ throw new Error("No se reconoce la variable o el numero");}
	}

	void direcciones():
	{	
	}
	{
		(  <LEFT>{world.turnRight(); world.turnRight(); world.turnRight();})
		| (  <RIGHT>{world.turnRight()})
		| (  <BACK>{world.turnRight(); world.turnRight();} )
	}

	void facing()
	{	
	}
	{
		(  <NORTH> {if (world.getFacing()==0) salida = "YA MIRA AL NORTE";
					else if(world.getFacing()==1){ world.turnRight(); world.turnRight();}
					else if(world.getFacing()==2){ world.turnRight(); world.turnRight(); world.turnRight();}
					else if(world.getFacing()==3){ world.turnRight();}
		})
		| (  <EAST>{if (world.getFacing()==2) salida = "YA MIRA AL ESTE";
					else if(world.getFacing()==0){ world.turnRight();}
					else if(world.getFacing()==1){ world.turnRight();world.turnRight(); world.turnRight();}
					else if(world.getFacing()==3){ world.turnRight(); world.turnRight();}
		})
		| (  <WEST>{if (world.getFacing()==3) salida = "YA MIRA AL OESTE";
					else if(world.getFacing()==0){ world.turnRight(); world.turnRight(); world.turnRight();}
					else if(world.getFacing()==1){ world.turnRight();}
					else if(world.getFacing()==2){ world.turnRight(); world.turnRight();}
		})
		| (  <SOUTH>{if (world.getFacing()==1) salida = "YA MIRA AL SUR";
					else if(world.getFacing()==0){ world.turnRight(); world.turnRight();}
					else if(world.getFacing()==2){ world.turnRight();}
					else if(world.getFacing()==3){ world.turnRight(); world.turnRight(); world.turnRight();}
		})
	}
	  

	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f);})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Numero demasiado grande: "+token.image+"!!");
			}
			return total;
		}
	}

	int variableString() throws Error:
	{	
		String total=null;
	}
	{
		<VARIABLE>
		{
			try 
			{
				total = token.image;
			} 
			catch (Exception ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("String no valido  "+token.image+"!!");
			}
			return total;
		}
	}

	